{"version":3,"sources":["Editor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Editor","useFabricJSEditor","editor","onReady","React","useState","init","setInit","update","value","setValue","useForceUpdate","useEffect","obj","canvas","getActiveObject","style","width","height","AppBar","position","Toolbar","gap","Tooltip","title","htmlFor","type","id","accept","display","onChange","event","file","target","files","img","Image","url","URL","createObjectURL","onload","document","createElement","getContext","drawImage","imageURL","toDataURL","fCanvas","setWidth","setHeight","deleteAll","setBackgroundImage","renderAll","revokeObjectURL","src","IconButton","color","component","a","JSON","text","json","parse","loadFromJSON","canvasData","onClick","filename","element","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","download","stringify","toJSON","Save","fabric","Text","fontFamily","fill","fontWeight","add","Container","marginTop","justifyContent","border","Paper","padding","marginBottom","remove","Delete","flexDirection","TextField","label","e","Number","onChangeComplete","c","set","hex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d0484aa1.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { FabricJSCanvas, useFabricJSEditor } from 'fabricjs-react'\nimport {\n    AppBar,\n    Container,\n    IconButton,\n    Paper,\n    TextField,\n    Toolbar,\n    Tooltip,\n} from '@material-ui/core'\nimport {\n    MenuOpen as OpenIcon,\n    Save as SaveIcon,\n    Add as NewIcon,\n    TextFields as AddTextIcon,\n    Delete,\n} from '@material-ui/icons'\nimport { fabric } from 'fabric'\nimport { CompactPicker } from 'react-color'\n\nfunction download(filename: string, text: string) {\n    const element = document.createElement('a')\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(text),\n    )\n    element.setAttribute('download', filename)\n\n    element.style.display = 'none'\n    document.body.appendChild(element)\n\n    element.click()\n\n    document.body.removeChild(element)\n}\n\nfunction useForceUpdate() {\n    const [value, setValue] = React.useState(0) // integer state\n    return () => setValue(value + 1) // update the state to force render\n}\n\nconst Editor = () => {\n    const { editor, onReady } = useFabricJSEditor()\n    const [init, setInit] = React.useState(false)\n    const update = useForceUpdate()\n\n    useEffect(() => {\n        if (init) return\n        if (editor) {\n            setInit(true)\n        }\n    }, [editor, init])\n\n    const obj = editor?.canvas?.getActiveObject() as any\n\n    return (\n        <div style={{ width: '100vw', height: '100vh' }}>\n            <AppBar position=\"relative\">\n                <Toolbar style={{ gap: 10 }}>\n                    <Tooltip title=\"만들기\">\n                        <label htmlFor=\"new_input\">\n                            <input\n                                type=\"file\"\n                                id=\"new_input\"\n                                accept=\"image/*\"\n                                style={{ display: 'none' }}\n                                onChange={(event) => {\n                                    if (editor) {\n                                        const file = event.target.files![0]\n                                        if (file) {\n                                            const img = new Image()\n                                            const url =\n                                                URL.createObjectURL(file)\n                                            img.onload = () => {\n                                                const canvas =\n                                                    document.createElement(\n                                                        'canvas',\n                                                    )\n\n                                                canvas.width = img.width\n                                                canvas.height = img.height\n\n                                                const ctx =\n                                                    canvas.getContext('2d')!\n                                                ctx.drawImage(img, 0, 0)\n\n                                                const imageURL =\n                                                    canvas.toDataURL(\n                                                        'image/png',\n                                                    )\n\n                                                editor.canvas.width = img.width\n                                                editor.canvas.height =\n                                                    img.height\n\n                                                const fCanvas =\n                                                    editor.canvas as any\n                                                fCanvas.setWidth(img.width)\n                                                fCanvas.setHeight(img.height)\n\n                                                editor.deleteAll()\n\n                                                fCanvas.setBackgroundImage(\n                                                    imageURL,\n                                                    () => {\n                                                        fCanvas.renderAll()\n                                                    },\n                                                )\n\n                                                URL.revokeObjectURL(url)\n                                            }\n                                            img.src = url\n                                        }\n                                    }\n                                }}\n                            />\n                            <IconButton color=\"inherit\" component=\"span\">\n                                <NewIcon />\n                            </IconButton>\n                        </label>\n                    </Tooltip>\n                    <Tooltip title=\"열기\">\n                        <label htmlFor=\"open_input\">\n                            <input\n                                type=\"file\"\n                                id=\"open_input\"\n                                accept=\".json\"\n                                style={{ display: 'none' }}\n                                onChange={async (event) => {\n                                    if (editor) {\n                                        const file = event.target.files![0]\n                                        if (file) {\n                                            const canvas = editor.canvas as any\n                                            const json = JSON.parse(\n                                                await file.text(),\n                                            )\n                                            canvas.setWidth(json.width)\n                                            canvas.setHeight(json.height)\n                                            canvas.loadFromJSON(\n                                                json.canvasData,\n                                                () => {\n                                                    canvas.renderAll()\n                                                },\n                                            )\n                                        }\n                                    }\n                                }}\n                            />\n                            <IconButton color=\"inherit\" component=\"span\">\n                                <OpenIcon />\n                            </IconButton>\n                        </label>\n                    </Tooltip>\n                    <Tooltip title=\"저장\">\n                        <IconButton\n                            color=\"inherit\"\n                            onClick={() => {\n                                const canvas = editor!.canvas as any\n                                download(\n                                    'card.json',\n                                    JSON.stringify({\n                                        canvasData: canvas.toJSON(),\n                                        width: canvas.width,\n                                        height: canvas.height,\n                                    }),\n                                )\n                            }}\n                        >\n                            <SaveIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"텍스트 추가\">\n                        <IconButton\n                            color=\"inherit\"\n                            onClick={() => {\n                                const text = new fabric.Text('Text', {\n                                    fontFamily: 'Noto Sans KR',\n                                    fill: '#000',\n                                    fontWeight: 500,\n                                })\n                                editor!.canvas.add(text)\n                            }}\n                        >\n                            <AddTextIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n            <Container style={{ marginTop: 20 }}>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        gap: 10,\n                    }}\n                >\n                    <div\n                        style={{\n                            border: '1px solid #000',\n                            display: 'inline-block',\n                        }}\n                    >\n                        <FabricJSCanvas onReady={onReady} />\n                    </div>\n                </div>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 10,\n                    }}\n                >\n                    <Paper style={{ padding: 10, display: 'inline-block' }}>\n                        {obj ? (\n                            <div>\n                                <div style={{ marginBottom: 10 }}>\n                                    <IconButton\n                                        onClick={() =>\n                                            editor!.canvas.remove(obj)\n                                        }\n                                    >\n                                        <Delete />\n                                    </IconButton>\n                                </div>\n                                {(() => {\n                                    switch (obj.type) {\n                                        case 'text':\n                                            return (\n                                                <div\n                                                    style={{\n                                                        display: 'flex',\n                                                        flexDirection: 'column',\n                                                        gap: 10,\n                                                    }}\n                                                >\n                                                    <TextField\n                                                        label=\"텍스트\"\n                                                        value={obj.text}\n                                                        onChange={(e) => {\n                                                            obj.text =\n                                                                e.target.value\n                                                            editor?.canvas?.renderAll()\n                                                            update()\n                                                        }}\n                                                    />\n                                                    <TextField\n                                                        label=\"굵기\"\n                                                        value={obj.fontWeight}\n                                                        type=\"number\"\n                                                        onChange={(e) => {\n                                                            obj.fontWeight =\n                                                                Number(\n                                                                    e.target\n                                                                        .value,\n                                                                )\n                                                            editor?.canvas?.renderAll()\n                                                            update()\n                                                        }}\n                                                    />\n                                                    <CompactPicker\n                                                        color={obj.fill}\n                                                        onChangeComplete={(\n                                                            c,\n                                                        ) => {\n                                                            obj.set({\n                                                                fill: c.hex,\n                                                            })\n                                                            editor!.canvas.renderAll()\n                                                            update()\n                                                        }}\n                                                    />\n                                                </div>\n                                            )\n                                        default:\n                                            return (\n                                                <div>\n                                                    지원되지 않는 오브젝트\n                                                    타입입니다\n                                                </div>\n                                            )\n                                    }\n                                })()}\n                            </div>\n                        ) : (\n                            '오브젝트를 선택해주세요'\n                        )}\n                    </Paper>\n                </div>\n            </Container>\n        </div>\n    )\n}\n\nexport default Editor\n","import React from 'react'\nimport Editor from './Editor'\n\nconst App = () => {\n    return (\n        <div style={{ width: '100vw', height: '100vh' }}>\n            <Editor />\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n    <RecoilRoot>\n        <App />\n    </RecoilRoot>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}